{
	"info": {
		"_postman_id": "0d2919e1-9454-4c69-9067-c8adb0f25674",
		"name": "PostmanTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41626624"
	},
	"item": [
		{
			"name": "loginPost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Успешная авторизация\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит access_token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 401 - Неверные учетные данные\", function () {\r",
							"    pm.response.to.not.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Clonn123\",\r\n  \"password\": \"Clonn123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/login/",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "loginGet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Успешная авторизация\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 401 - Неверные учетные данные\", function () {\r",
							"    pm.response.to.not.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/login/",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Пользователь найден\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит информацию о пользователе\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 404 - Пользователь не найден\", function () {\r",
							"    if (pm.response.code === 404) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Users matching query does not exist.\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/user/1/",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"user",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "rec",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Успешное получение рекомендаций\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит список манги\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"    pm.expect(jsonData[0]).to.have.property(\"manga_id\");\r",
							"    pm.expect(jsonData[0]).to.have.property(\"title_ru\");\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 400 - Ошибка запроса\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Invalid parameters\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/rec/manga/?id_user=1&pageNumber=1&method=CBF",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"rec",
						"manga",
						""
					],
					"query": [
						{
							"key": "id_user",
							"value": "1"
						},
						{
							"key": "pageNumber",
							"value": "1"
						},
						{
							"key": "method",
							"value": "CBF"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "mylist-manga",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Успешное получение списка манги\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит массив манги\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0]).to.have.property(\"manga_list_id\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"url_img\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"descriptionData\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"descriptionEpisod\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"title_ru\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"score\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 400 - Ошибка запроса\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Invalid sorting parameter\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 404 - Данных нет\", function () {\r",
							"    if (pm.response.code === 404) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"No manga found for this user\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/data/mylist-manga/1/-score/",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"data",
						"mylist-manga",
						"1",
						"-score",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "score-manga",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус 200 - Оценка успешно обновлена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"manga_id\", 121496);\r",
							"    pm.expect(jsonData).to.have.property(\"user_id\", 1);\r",
							"    pm.expect(jsonData).to.have.property(\"score\", 9);\r",
							"    pm.expect(jsonData).to.have.property(\"status\", \"completed\");\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 400 - Ошибка валидации\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Invalid score value\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Статус 500 - Ошибка сервера\", function () {\r",
							"    if (pm.response.code === 500) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"manga_id\": 121496,\r\n    \"user_id\": 1,\r\n    \"score\": 9,\r\n    \"status\": \"completed\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/score-manga/",
					"protocol": "http",
					"host": [
						"src-backend-1"
					],
					"port": "8000",
					"path": [
						"api",
						"score-manga",
						""
					]
				}
			},
			"response": []
		}
	]
}